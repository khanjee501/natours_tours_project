@keyframes moveInLeft {
  /* Start */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  /* Between can be any % between 0 and 100 */
  80% {
    transform: translateX(1rem); }
  /* End */
  100% {
    opacity: 1;
    /* because we wanrt it to be at its original position at the end of animation */
    transform: translate(0); } }

@keyframes moveInRight {
  /* Start */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  /* Between can be any % between 0 and 100 */
  80% {
    transform: translateX(-1rem); }
  /* End */
  100% {
    opacity: 1;
    /* because we wanrt it to be at its original position at the end of animation */
    transform: translate(0); } }

@keyframes moveInBottom {
  /* Start */
  0% {
    opacity: 0;
    transform: translateY(10rem); }
  /* End */
  100% {
    opacity: 1;
    /* because we wanrt it to be at its original position at the end of animation */
    transform: translate(0); } }

/* GENERAL SETTINGS FOR * AND BODY */
/* Better practice to write * like this with psuedo-elements and
set box-sizing like this, not just on * */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box; }

body {
  font-family: "lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* Sometime sthe animation is abit shaky, this will fix it. By shaky
  it moves up a little and looks like it shakes. But in my case it is
  even ohkay without this prop, but included as a safe play */
  backface-visibility: hidden; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* animations */
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    /*
  Will wait for 3 seconds and then the animation will start
  animation-delay: 3s
  Will happen 3 times as value is 3
  animation-iteration-count: 3
  */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    margin-bottom: 6rem;
    /* can also be written as */
    animation: moveInRight 1s ease-out; }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  font-size: 1.6rem;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  /* we want the after psuedo elmenet of this button to hide behind this
  button, hence set position relative on this btn itself */
  position: relative; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* this style will only be applied on hover of the after psuedo-element
of the btn */ }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* this will apply the start styles of animation before the animation starts */
  animation-fill-mode: backwards; }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row:after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /* Image will be below the gradient as it is the 2nd value */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.808), rgba(40, 180, 133, 0.808)), url("../img/hero.jpg");
  /* THis will set the img so it is covered and fit inside the parent box */
  background-size: cover;
  /* Background-position: top; will always keep the top at top and crop other sides.
  other values are bottom, center etc */
  background-position: top;
  position: relative;
  /* starts from left top, then right top, then right bottom and last
  left bottom. Values are x y. the vh can also be pxls or percentage as well */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* The below three properties will center the box hor and ver
    if we also use top 50%. We are using 40% bacuse we have clip path
    in the bototm border due to which it doesnt look centered if top 50%
    is used */
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }
